{
 "metadata": {
  "name": "",
  "signature": "sha256:47eca8fead9d5201e59ddcdfa3db984cb7e240fac3ade234a13f27fd7871a263"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "###import All Libraries\n",
      "# would like to create a function that predicts Square foot value by defined inputs. Mostly Year, and Neighboorhodd. \n",
      "\n",
      "# in simple liner regrression would look like\n",
      "#def predict(Neighborhood, year):\n",
      "#    return results.predict([1, Neighborhood, year])\n",
      "\n",
      "#print \"\\n\"\n",
      "#print \"....... {}\".format(predict(115, 2015)[0])\n",
      "\n",
      "import numpy as np\n",
      "import pandas as pd\n",
      "from sklearn import feature_extraction\n",
      "from sklearn import tree\n",
      "from sklearn import ensemble\n",
      "from sklearn import neighbors\n",
      "from sklearn import linear_model\n",
      "from sklearn import ensemble\n",
      "from sklearn.tree import DecisionTreeRegressor\n",
      "from sklearn.metrics import accuracy_score\n",
      "from sklearn.ensemble import RandomForestRegressor\n",
      "from sklearn.pipeline import Pipeline\n",
      "from sklearn.preprocessing import Imputer\n",
      "from sklearn.ensemble import GradientBoostingRegressor\n",
      "from sklearn.ensemble.partial_dependence import plot_partial_dependence\n",
      "from sklearn.ensemble.partial_dependence import partial_dependence\n",
      "from sklearn.cross_validation import cross_val_score, train_test_split\n",
      "from sklearn.utils import shuffle\n",
      "from sklearn.metrics import mean_squared_error\n",
      "import statsmodels.api as sm\n",
      "from mpl_toolkits.mplot3d import Axes3D\n",
      "import pylab as pl\n",
      "import matplotlib.pyplot as plt\n",
      "from IPython.core.display import HTML\n",
      "import matplotlib.pyplot as plt\n",
      "\n",
      "### Are data was orginally in execl and broken by year - combined and tunred all number objects to int or floats. \n",
      "### data example = http://www1.nyc.gov/site/finance/taxes/property-cooperative-and-condominium-comparables-archives.page\n",
      "# 36 Columns +, tried working with 23  reduced it to 12 no difference at all. \n",
      "data = pd.read_csv('/home/vagrant/repos/datasets/LastDitch_MASSIVE_REDUXWith2014@34583.csv')\n",
      "df = data.interpolate()\n",
      "dfC = df\n",
      "### lets map our Objects to numbers (yes i know i could do this with a function 40 mins later - i just sad map it)\n",
      "# eventually just used counter to generate a count of each unique item - copied and manually mapped\n",
      "Type_mapping = {'Condo': 2,\n",
      "           'Coop': 1}\n",
      "BuildingClass_mapping = {'C1-WALK-UP': 1,\n",
      "        'C4-WALK-UP': 25,\n",
      "        'C5-WALK-UP': 24,\n",
      "        'C6-WALK-UP': 2,\n",
      "        'C7-WALK-UP': 3,\n",
      "        'C8-WAlK-UP': 4,\n",
      "        'C9-WAlK-UP': 5,\n",
      "        'R2-WALK-UP': 6,\n",
      "        'D0-ELEVATOR': 7,\n",
      "        'D1-ELEVATOR': 8,\n",
      "        'D2-ELEVATOR': 9,\n",
      "        'D3-ELEVATOR': 10,\n",
      "        'D4-ELEVATOR': 11,\n",
      "        'D5-ELEVATOR': 12,\n",
      "        'D6-ELEVATOR': 13,\n",
      "        'D7-ELEVATOR': 14,\n",
      "        'D8-ELEVATOR': 15,\n",
      "        'D9-ELEVATOR': 16, \n",
      "        'R4-ELEVATOR': 17,\n",
      "        'R0-CONDOMINIUM': 18,\n",
      "        'R2-CONDOMINIUM': 19,\n",
      "        'R4-CONDOMINIUM': 20,\n",
      "        'RR-CONDOMINIUM': 21,\n",
      "        'R9-CONDOMINIUM': 22,\n",
      "        'R9-CONDOPS': 23}\n",
      "hood_mapping = {\n",
      "    \"AIRPORT LA GUARDIA\" : 1,\n",
      "    \"ALPHABET CITY\" : 2,\n",
      "    \"ARVERNE\" : 3,\n",
      "    \"ASTORIA\" : 4,\n",
      "    \"BATH BEACH\" : 5,\n",
      "    \"BATHGATE\" : 6,\n",
      "    \"BAY RIDGE\" : 7,\n",
      "    \"BEDFORD PARK/NORWOOD\" : 8,\n",
      "    \"BEDFORD STUYVESANT\" : 9,\n",
      "    \"BEECHHURST\" : 10,\n",
      "    \"BELLE HARBOR\" : 11,\n",
      "    \"BELMONT\" : 12,\n",
      "    \"BENSONHURST\" : 13,\n",
      "    \"BERGEN BEACH\" : 14,\n",
      "    \"BOERUM HILL\" : 15,\n",
      "    \"BOROUGH PARK\" : 16,\n",
      "    \"BRIARWOOD\" : 17,\n",
      "    \"BRIGHTON BEACH\" : 18,\n",
      "    \"BRONX-UNKNOWN\" : 19,\n",
      "    \"BRONXDALE\" : 20,\n",
      "    \"BROOKLYN HEIGHTS\" : 21,\n",
      "    \"BROWNSVILLE\" : 22,\n",
      "    \"BUSHWICK\" : 23,\n",
      "    \"CANARSIE\" : 24,\n",
      "    \"CARROLL GARDENS\" : 25,\n",
      "    \"CASTLE HILL/UNIONPORT\" : 26,\n",
      "    \"CHELSEA\" : 27,\n",
      "    \"CHINATOWN\" : 28,\n",
      "    \"CITY ISLAND\" : 29,\n",
      "    \"CIVIC CENTER\" : 30,\n",
      "    \"CLINTON\" : 31,\n",
      "    \"CLINTON HILL\" : 32,\n",
      "    \"CO-OP CITY\" : 33,\n",
      "    \"COBBLE HILL\" : 34,\n",
      "    \"COBBLE HILL-WEST\" : 35,\n",
      "    \"CONEY ISLAND\" : 36,\n",
      "    \"CORONA\" : 37,\n",
      "    \"COUNTRY CLUB\" : 38,\n",
      "    \"CROTONA PARK\" : 39,\n",
      "    \"CROWN HEIGHTS\" : 40,\n",
      "    \"CYPRESS HILLS\" : 41,\n",
      "    \"DOUGLASTON\" : 42,\n",
      "    \"DOWNTOWN-FULTON MALL\" : 43,\n",
      "    \"DOWNTOWN-FULTON FERRY\" : 172,\n",
      "    \"DOWNTOWN-METROTECH\" : 44,\n",
      "    \"DYKER HEIGHTS\" : 45,\n",
      "    \"EAST ELMHURST\" : 46,\n",
      "    \"EAST NEW YORK\" : 47,\n",
      "    \"EAST TREMONT\" : 48,\n",
      "    \"EAST VILLAGE\" : 49,\n",
      "    \"ELMHURST\" : 50,\n",
      "    \"FAR ROCKAWAY\" : 51,\n",
      "    \"FASHION\" : 52,\n",
      "    \"FIELDSTON\" : 53,\n",
      "    \"FLATBUSH-CENTRAL\" : 54,\n",
      "    \"FLATBUSH-EAST\" : 55,\n",
      "    \"FLATBUSH-LEFFERTS GARDEN\" : 56,\n",
      "    \"FLATBUSH-NORTH\" : 57,\n",
      "    \"FLATIRON\" : 58,\n",
      "    \"FLATLANDS\" : 59,\n",
      "    \"FLORAL PARK\" : 60,\n",
      "    \"FLUSHING MEADOW PARK\" : 61,\n",
      "    \"FLUSHING-NORTH\" : 62,\n",
      "    \"FLUSHING-SOUTH\" : 63,\n",
      "    \"FORDHAM\" : 64,\n",
      "    \"FOREST HILLS\" : 65,\n",
      "    \"FRESH MEADOWS\" : 66,\n",
      "    \"GLEN OAKS\" : 67,\n",
      "    \"GOWANUS\" : 68,\n",
      "    \"GRAMERCY\" : 69,\n",
      "    \"GRAVESEND\" : 70,\n",
      "    \"GREENPOINT\" : 71,\n",
      "    \"GREENWICH VILLAGE-CENTRAL\" : 72,\n",
      "    \"GREENWICH VILLAGE-WEST\" : 73,\n",
      "    \"HAMMELS\" : 74,\n",
      "    \"HARLEM-CENTRAL\" : 75,\n",
      "    \"HARLEM-EAST\" : 76,\n",
      "    \"HARLEM-EAST\" : 77,\n",
      "    \"HARLEM-UPPER\" : 78,\n",
      "    \"HARLEM-WEST\" : 79,\n",
      "    \"HIGHBRIDGE/MORRIS HEIGHTS\" : 80,\n",
      "    \"HILLCREST\" : 81,\n",
      "    \"HOLLIS\" : 82,\n",
      "    \"HOLLIS HILLS\" : 83,\n",
      "    \"HOLLISWOOD\" : 84,\n",
      "    \"HUNTS POINT\" : 85,\n",
      "    \"INWOOD\" : 86,\n",
      "    \"JACKSON HEIGHTS\" : 87,\n",
      "    \"JAMAICA\" : 88,\n",
      "    \"JAMAICA ESTATES\" : 89,\n",
      "    \"JAMAICA HILLS\" : 90,\n",
      "    \"JAVITS CENTER\" : 91,\n",
      "    \"KENSINGTON\" : 92,\n",
      "    \"KEW GARDENS\" : 93,\n",
      "    \"KINGSBRIDGE HTS/UNIV HTS\" : 94,\n",
      "    \"KINGSBRIDGE/JEROME PARK\" : 95,\n",
      "    \"KIPS BAY\" : 96,\n",
      "    \"LAURELTON\" : 97,\n",
      "    \"LITTLE ITALY\" : 98,\n",
      "    \"LITTLE NECK\" : 99,\n",
      "    \"LONG ISLAND CITY\" : 100,\n",
      "    \"LOWER EAST SIDE\" : 101,\n",
      "    \"LOWER EAST SIDE\" : 102,\n",
      "    \"MADISON\" : 103,\n",
      "    \"MANHATTAN VALLEY\" : 104,\n",
      "    \"MARINE PARK\" : 105,\n",
      "    \"MASPETH\" : 106,\n",
      "    \"MELROSE/CONCOURSE\" : 107,\n",
      "    \"MIDDLE VILLAGE\" : 108,\n",
      "    \"MIDTOWN CBD\" : 109,\n",
      "    \"MIDTOWN EAST\" : 110,\n",
      "    \"MIDTOWN WEST\" : 111,\n",
      "    \"MIDWOOD\" : 112,\n",
      "    \"MILL BASIN\" : 113,\n",
      "    \"MORNINGSIDE HEIGHTS\" : 114,\n",
      "    \"MORRIS PARK/VAN NEST\" : 115,\n",
      "    \"MORRISANIA/LONGWOOD\" : 116,\n",
      "    \"MOTT HAVEN/PORT MORRIS\" : 117,\n",
      "    \"MOUNT HOPE/MOUNT EDEN\" : 118,\n",
      "    \"MURRAY HILL\" : 119,\n",
      "    \"NAVY YARD\" : 120,\n",
      "    \"OAKLAND GARDENS\" : 121,\n",
      "    \"OCEAN HILL\" : 122,\n",
      "    \"OCEAN PARKWAY-NORTH\" : 123,\n",
      "    \"OCEAN PARKWAY-SOUTH\" : 124,\n",
      "    \"OLD MILL BASIN\" : 125,\n",
      "    \"OZONE PARK\" : 126,\n",
      "    \"PARK SLOPE\" : 127,\n",
      "    \"PARK SLOPE SOUTH\" : 128,\n",
      "    \"PARKCHESTER\" : 129,\n",
      "    \"PELHAM PARKWAY SOUTH\" : 130,\n",
      "    \"PROSPECT HEIGHTS\" : 131,\n",
      "    \"QUEENS VILLAGE\" : 132,\n",
      "    \"QUEENS VILLAGE\" : 133,\n",
      "    \"REGO PARK\" : 134,\n",
      "    \"REGO PARK\" : 135,\n",
      "    \"RICHMOND HILL\" : 136,\n",
      "    \"RIDGEWOOD\" : 137,\n",
      "    \"RIVERDALE\" : 138,\n",
      "    \"ROCKAWAY PARK\" : 139,\n",
      "    \"SCHUYLERVILLE/PELHAM BAY\" : 140,\n",
      "    \"SHEEPSHEAD BAY\" : 141,\n",
      "    \"SO. JAMAICA-BAISLEY PARK\" : 142,\n",
      "    \"SOHO\" : 143,\n",
      "    \"SOUNDVIEW\" : 144,\n",
      "    \"SOUTH JAMAICA\" : 145,\n",
      "    \"SOUTH OZONE PARK\" : 146,\n",
      "    \"SOUTHBRIDGE\" : 147,\n",
      "    \"SPRINGFIELD GARDENS\" : 148,\n",
      "    \"SUNNYSIDE\" : 149,\n",
      "    \"THROGS NECK\" : 150,\n",
      "    \"TRIBECA\" : 151,\n",
      "    \"UPPER EAST SIDE (59-79)\" : 152,\n",
      "    \"UPPER EAST SIDE (79-96)\" : 153,\n",
      "    \"UPPER EAST SIDE (96-110)\" : 154,\n",
      "    \"UPPER WEST SIDE (59-79)\" : 155,\n",
      "    \"UPPER WEST SIDE (79-96)\" : 156,\n",
      "    \"UPPER WEST SIDE (96-116)\" : 157,\n",
      "    \"VAN CORTLANDT PARK\" : 158,\n",
      "    \"WAKEFIELD\" : 159,\n",
      "    \"WASHINGTON HEIGHTS LOWER\" : 160,\n",
      "    \"WASHINGTON HEIGHTS UPPER\" : 161,\n",
      "    \"WESTCHESTER\" : 162,\n",
      "    \"WHITESTONE\" : 163,\n",
      "    \"WILLIAMSBRIDGE\" : 164,\n",
      "    \"WILLIAMSBURG-CENTRAL\" : 165,\n",
      "    \"WILLIAMSBURG-EAST\" : 166,\n",
      "    \"WILLIAMSBURG-NORTH\" : 167,\n",
      "    \"WILLIAMSBURG-SOUTH\" : 168,\n",
      "    \"WINDSOR TERRACE\" : 169,\n",
      "    \"WOODHAVEN\" : 170,\n",
      "    \"WYCKOFF HEIGHTS\" : 171}\n",
      "\n",
      "dfC['Type'] = dfC['Type'].map(Type_mapping)\n",
      "dfC['BuildingClass'] = dfC['BuildingClass'].map(BuildingClass_mapping)\n",
      "dfC['Neighborhood'] = dfC['Neighborhood'].map(hood_mapping)\n",
      "\n",
      "### lets Make sure our Objects are numbers and that we've kept the shape \n",
      "DX = dfC.convert_objects(convert_numeric=True)\n",
      "DX = DX.interpolate()\n",
      "print DX.shape\n",
      "print DX.head(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(40712, 12)\n",
        "   MarketSqFt  Type    BlockLot  Neighborhood  BuildingClass  TotalUnits  \\\n",
        "0          68     1  3000680107            44             11         120   \n",
        "1          65     1  3000860011            44             11        1026   \n",
        "\n",
        "   YearBuilt  GrossSqFt       EGI  GIperSqFt    Market  Year  \n",
        "0       1902     121580   2044975      16.82   8320000  2009  \n",
        "1       1950     883265  14132240      16.00  57500000  2009  \n"
       ]
      }
     ],
     "prompt_number": 43
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "DataAll = DX\n",
      "## for ease of use lets turn everything into a float - so all types are the same\n",
      "DataFloat = DataAll.astype(float)\n",
      "### Lets Slice the Data for our Model and Target. WE want to predict \"MarketSqFt\" in 2014\n",
      "DataModel = DataFloat.iloc[:40712,:12]\n",
      "## compete data set\n",
      "DataTarget = DataFloat[DataFloat.columns[0]] \n",
      "## Just MarketSqFt \n",
      "print DataModel.shape\n",
      "print DataTarget.shape\n",
      "print DataFloat.dtypes\n",
      "print DataTarget.head(1)\n",
      "### lets check it"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(40712, 12)\n",
        "(40712,)\n",
        "MarketSqFt       float64\n",
        "Type             float64\n",
        "BlockLot         float64\n",
        "Neighborhood     float64\n",
        "BuildingClass    float64\n",
        "TotalUnits       float64\n",
        "YearBuilt        float64\n",
        "GrossSqFt        float64\n",
        "EGI              float64\n",
        "GIperSqFt        float64\n",
        "Market           float64\n",
        "Year             float64\n",
        "dtype: object\n",
        "0    68\n",
        "Name: MarketSqFt, dtype: float64\n"
       ]
      }
     ],
     "prompt_number": 44
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "## Lets Turn everything into an Array \n",
      "DataModelArray = np.array(DataModel)\n",
      "DataTargetArray = np.array(DataTarget)\n",
      "## Lets Defeine our Feature names and Dataframe and arraya\n",
      "feature_names = DataFloat.iloc[:0,1:12]\n",
      "feature_namesArray = np.array(feature_names)\n",
      "print feature_names\n",
      "print feature_namesArray\n",
      "## Lets set our data up for All and Target \n",
      "X = DataModel\n",
      "y = DataTarget\n",
      "## Lets set our data up for train and test 2014 data beings on row 35001\n",
      "X_train, X_test = X[:25000], X[25001:3500]\n",
      "y_train, y_test = y[:25000], y[25001:3500]\n",
      "feature_data = DataModel\n",
      "target = DataTarget\n",
      "input_data = DataModel\n",
      "input_data = sm.add_constant(input_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Empty DataFrame\n",
        "Columns: [Type, BlockLot, Neighborhood, BuildingClass, TotalUnits, YearBuilt, GrossSqFt, EGI, GIperSqFt, Market, Year]\n",
        "Index: []\n",
        "[]\n"
       ]
      }
     ],
     "prompt_number": 45
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "## okay model time!  Lets Run some Trees and Linear regression to see what the R^2 is. \n",
      "reg = DecisionTreeRegressor()\n",
      "a_train, a_test, b_train, b_test = train_test_split(feature_data, target, test_size=0.2, random_state=42)\n",
      "reg.fit(a_train, b_train)\n",
      "## i could have used my defied set - but since this my round wanted to do it pure.\n",
      "print \"R^2 {}\".format(reg.score(a_test, b_test))\n",
      "print \"Tree depth: {}\".format(reg.tree_.max_depth)\n",
      "\n",
      "reg.feature_importances_\n",
      "\n",
      "from sklearn.linear_model import LinearRegression\n",
      "linear_reg = LinearRegression()\n",
      "a_train, a_test, b_train, b_test = train_test_split(feature_data, target, test_size=0.2, random_state=42)\n",
      "linear_reg.fit(a_train, b_train)\n",
      "\n",
      "print \"R^2 {}\".format(linear_reg.score(a_test, b_test))\n",
      "\n",
      "regression_model = sm.OLS(target, input_data)\n",
      "results = regression_model.fit()\n",
      "print results.summary()\n",
      "predictions = results.predict(input_data)\n",
      "print results.predict(input_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "R^2 0.999998584708\n",
        "Tree depth: 16\n",
        "R^2 1.0\n",
        "                            OLS Regression Results                            \n",
        "==============================================================================\n",
        "Dep. Variable:             MarketSqFt   R-squared:                       1.000\n",
        "Model:                            OLS   Adj. R-squared:                  1.000\n",
        "Method:                 Least Squares   F-statistic:                 7.915e+18\n",
        "Date:                Tue, 05 May 2015   Prob (F-statistic):               0.00\n",
        "Time:                        03:30:56   Log-Likelihood:             4.9170e+05\n",
        "No. Observations:               40712   AIC:                        -9.834e+05\n",
        "Df Residuals:                   40699   BIC:                        -9.833e+05\n",
        "Df Model:                          12                                         \n",
        "Covariance Type:            nonrobust                                         \n",
        "=================================================================================\n",
        "                    coef    std err          t      P>|t|      [95.0% Conf. Int.]\n",
        "---------------------------------------------------------------------------------\n",
        "const          1.767e-06   9.36e-06      0.189      0.850     -1.66e-05  2.01e-05\n",
        "MarketSqFt        1.0000   4.06e-10   2.46e+09      0.000         1.000     1.000\n",
        "Type            2.59e-08   2.02e-08      1.280      0.201     -1.38e-08  6.56e-08\n",
        "BlockLot       -3.83e-17   7.95e-18     -4.814      0.000     -5.39e-17 -2.27e-17\n",
        "Neighborhood    1.74e-13   1.46e-10      0.001      0.999     -2.86e-10  2.87e-10\n",
        "BuildingClass -7.523e-12   1.56e-09     -0.005      0.996     -3.07e-09  3.05e-09\n",
        "TotalUnits     1.371e-14   1.51e-11      0.001      0.999     -2.97e-11  2.97e-11\n",
        "YearBuilt      -3.68e-14   3.59e-11     -0.001      0.999     -7.04e-11  7.04e-11\n",
        "GrossSqFt      6.838e-16   7.07e-14      0.010      0.992     -1.38e-13  1.39e-13\n",
        "EGI           -6.916e-18   6.22e-15     -0.001      0.999     -1.22e-14  1.22e-14\n",
        "GIperSqFt       1.51e-11   2.52e-09      0.006      0.995     -4.93e-09  4.96e-09\n",
        "Market         3.123e-19   1.02e-15      0.000      1.000     -1.99e-15  1.99e-15\n",
        "Year          -2.078e-13   4.66e-09  -4.46e-05      1.000     -9.12e-09  9.12e-09\n",
        "==============================================================================\n",
        "Omnibus:                     1344.809   Durbin-Watson:                   0.008\n",
        "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             1451.380\n",
        "Skew:                           0.452   Prob(JB):                         0.00\n",
        "Kurtosis:                       2.804   Cond. No.                     3.04e+12\n",
        "==============================================================================\n",
        "\n",
        "Warnings:\n",
        "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
        "[2] The condition number is large, 3.04e+12. This might indicate that there are\n",
        "strong multicollinearity or other numerical problems."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[ 68.00000146  65.00000147  75.00000144 ...,  78.84000143  74.97000144\n",
        "  74.97000144]\n"
       ]
      }
     ],
     "prompt_number": 46
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "## Hmm everything looks perfect.... something must be wrong. Odd for success just plummented. \n",
      "## For good measure i'm going to run all the regression models to see whats up\n",
      "\n",
      "print \"\\GRADIENT REGRESSOR\\n\"\n",
      "# see what happens as we bump up the number of estimators\n",
      "GRADIENT_clf = ensemble.GradientBoostingRegressor(n_estimators=50)\n",
      "scores = cross_val_score(GRADIENT_clf, feature_data, target, cv=5)\n",
      "print \"Mean: {}\".format(scores.mean())\n",
      "print \"Std Dev: {}\".format(np.std(scores))\n",
      "\n",
      "print \"\\Decision Tree\\n\"\n",
      "decision_tree_clf = tree.DecisionTreeRegressor(min_samples_leaf=10)\n",
      "scores = cross_val_score(decision_tree_clf,feature_data, target, cv=4)\n",
      "print \"Mean: {}\".format(scores.mean())\n",
      "print \"Std Dev: {}\".format(np.std(scores))\n",
      "\n",
      "print \"\\nRANDOM FOREST\\n\"\n",
      "# see what happens as we bump up the number of estimators\n",
      "random_forest_clf = ensemble.ExtraTreesRegressor(n_estimators=50)\n",
      "scores = cross_val_score(random_forest_clf, feature_data, target, cv=5)\n",
      "print \"Mean: {}\".format(scores.mean())\n",
      "print \"Std Dev: {}\".format(np.std(scores))\n",
      "\n",
      "print \"\\nBOOSTED TREES\\n\"\n",
      "boosted_clf = ensemble.AdaBoostRegressor(n_estimators=50)\n",
      "scores = cross_val_score(boosted_clf, feature_data, target, cv=5)\n",
      "print \"Mean: {}\".format(scores.mean())\n",
      "print \"Std Dev: {}\".format(np.std(scores))\n",
      "\n",
      "print \"\\WHY NOT? nkNN\\n\"\n",
      "knn_clf = neighbors.KNeighborsRegressor(n_neighbors=7)\n",
      "scores = cross_val_score(knn_clf, feature_data, target, cv=5)\n",
      "print \"Mean: this is why {}\".format(scores.mean())\n",
      "print \"Std Dev: this is why {}\".format(np.std(scores))\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\\GRADIENT REGRESSOR\n",
        "\n",
        "Mean: 0.999750014137"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Std Dev: 0.000125837501149\n",
        "\\Decision Tree\n",
        "\n",
        "Mean: 0.999767344164"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Std Dev: 0.000264043530292\n",
        "\n",
        "RANDOM FOREST\n",
        "\n",
        "Mean: 0.99918111992"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Std Dev: 0.00062231630464\n",
        "\n",
        "BOOSTED TREES\n",
        "\n",
        "Mean: 0.988169179869"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Std Dev: 0.00460648467866\n",
        "\\WHY NOT? nkNN\n",
        "\n",
        "Mean: this is why 0.550944861296"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Std Dev: this is why 0.198542818348\n"
       ]
      }
     ],
     "prompt_number": 47
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "## Let's shake things up? Maybe its my data set up? \n",
      "X, y = shuffle(DataModel, DataTarget, random_state=13)\n",
      "X = X.astype(np.float32)\n",
      "offset = int(X.shape[0] * 0.9)\n",
      "X_train, y_train = X[:offset], y[:offset]\n",
      "X_test, y_test = X[offset:], y[offset:]\n",
      "\n",
      "##  Fit regression model same pramaters above\n",
      "params = {'n_estimators': 50, 'max_depth': 4, 'min_samples_split': 1,\n",
      "          'learning_rate': 0.1, 'loss': 'ls'} # played aroudn with this - doesn't really matter\n",
      "GBR = ensemble.GradientBoostingRegressor(**params)\n",
      "\n",
      "GBR.fit(X_train, y_train)\n",
      "GBRFit = GBR.fit(X_train, y_train)\n",
      "mse = mean_squared_error(y_test, GBR.predict(X_test))\n",
      "print(\"MSE: %.4f\" % mse)\n",
      "print \"clfFit:\"\n",
      "print clfFit\n",
      "## Plot training deviance\n",
      "\n",
      "# #compute test set deviance\n",
      "test_score = np.zeros((params['n_estimators'],), dtype=np.float64)\n",
      "\n",
      "for i, y_pred in enumerate(GBR.staged_decision_function(X_test)):\n",
      "    test_score[i] = GBR.loss_(y_test, y_pred)\n",
      "\n",
      "plt.figure(figsize=(12, 6))\n",
      "plt.subplot(1, 2, 1)\n",
      "plt.title('Deviance')\n",
      "plt.plot(np.arange(params['n_estimators']) + 1, GBR.train_score_, 'b-',\n",
      "         label='Training Set Deviance')\n",
      "plt.plot(np.arange(params['n_estimators']) + 1, test_score, 'r-',\n",
      "         label='Test Set Deviance')\n",
      "plt.legend(loc='upper right')\n",
      "plt.xlabel('Boosting Iterations')\n",
      "plt.ylabel('Deviance')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "MSE: 0.1996\n",
        "clfFit:\n",
        "GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',\n",
        "             max_depth=4, max_features=None, max_leaf_nodes=None,\n",
        "             min_samples_leaf=1, min_samples_split=1, n_estimators=50,\n",
        "             random_state=None, subsample=1.0, verbose=0, warm_start=False)\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 48,
       "text": [
        "<matplotlib.text.Text at 0x7f6c7eb3dcd0>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\ntm3b2LNnD5s2beLll1+moqKCSZMmsWnTJjZt2kRERAQ33VQ9P7LL5ars/wtAVlYWPXv2ZNeuXdx5\n551MmjSpUftOmDCBgQMHsnv3bqZMmcI777xT473uBg4cyLRp03jqqadYtGgR5eXlNV6/8sorCQsL\nY+3atSxZsoSvvvqK1157jV69evHSSy8xaNAgCgoKDntjSu3PTk1NpV+/fsyfPx+A5557jlmzZjFv\n3jy2bt1KfHw8N954Y9W5zJgxo+q92dnZbNq0ibPPPvuQz4mOjuadd95h3759fPbZZ7z44ot88skn\nNfb5/vvvWb16NXPnzuVvf/sbv/32G0DVN4IvvviC/Px83nzzTSIjI9m/fz/Dhg1j4sSJ7Nixg5kz\nZ3LDDTewcuXKQz5f6testStxli/8vrt06WLNnTvXsizL+vbbb62wsLDD1nKXLFlixcfHV61nZGRY\nr7/+umVZpn7cvXv3qtf2799vuVwua9u2bQ3ad+PGjVZISIh14MCBqtcnTpxoTZw4sd643n33XevM\nM8+0oqKirDZt2lhPPPGEZVmWlZeXZ4WHh9c41vTp062hQ4dWxXGkmrd73O7Gjx9vXXvttZZlWVbP\nnj2rfo6WZVlbtmyxQkNDrfLycis/P9+KioqyNm3aZFmWZd17773WpEmTqvZ1uVzW2rVr6/zsW2+9\n1Zo8ebJlWZa1fv16y+VyWbm5uVWv9+/f33rvvfcsy7KsY445xpo1a9Yhx5g5c6Z1+umn19h27bXX\nWg899FCdn1nfv1ta8JCwIs2qnoZkgzXlTZzt2rUjLCysar2oqIjJkyfz5ZdfVpUBCgsLsSyrzpZw\nYmJi1XJkZGTV/u3bt/d43+3bt5OQkECrVq2qXk9NTWXz5s31xj1hwgQmTJhAeXk5H330EZdeeikn\nnXQSrVu3prS0lKSkpKp9Kyoq6NSp0xF/FkeSk5PDaaedBsDGjRs577zzCAqqLhaEhISwbds2kpKS\nOPvss5kxYwZ33nknM2fO5LXXXqvzmAsXLuTuu+9mxYoVlJSUcPDgQS6++OIa+9T+uRUWFlbF061b\nt0OOuXHjRhYuXEh8fHzVtrKyMi6//PLGn7wHVDYRv2VZTfNoSrUT8tNPP83q1avJyspi3759fPfd\nd1iW5dXb/pOSkti9ezcHDhyo2rZp0yaP3hscHMyFF17ICSecwIoVK+jUqRPh4eHs2rWLPXv2sGfP\nHvbt28fy5cuBQ8/XU5s3b+bnn3/m9NNPB6BTp07MmTOn6jP27NlDUVFR1R+NSy65hBkzZrBgwQKK\ni4sZOnRoncedMGECY8eOJScnh71793LddddRUVFR5761paamsmbNmkO2d+rUiSFDhtSIraCg4JA6\nfFNT8hZxUGFhIREREcTFxbF79+4aF9C8pXPnzvTr148pU6ZQWlrKggULmD17dr2JdurUqXz++ecU\nFBRQUVHBF198wYoVKxgwYACJiYkMHz6c22+/ver1tWvXMm/ePMBc3MzJyaG0tPSwMVX+sSoqKuK7\n775jzJgxDBgwoKrHyXXXXce9995b9Udmx44dzJo1q+r9o0aNYuPGjTz44IOMHz++3s8pLCwkPj6e\nsLAwsrKymD59usd/YK6++mruv/9+1qxZg2VZLFu2jN27d3POOeewevVq3nnnHUpLSyktLeWnn35i\n1apVHh23sZS8RZpR7URx2223ceDAAdq2bcspp5zCyJEj600mtS9I1nU8T/d99913WbBgAW3atOH+\n++9n3LhxNco57mJjY3nsscfo3Lkz8fHx3H333bz00kuccsopAEybNo2SkhLS09NJSEjgoosuIi8v\nD4AzzjiD3r17k5iYWGdpp9JNN91EbGwsiYmJTJ48mYsuuqhG75hbb72Vc889l+HDhxMbG8ugQYPI\nysqqej0sLIzzzz+fuXPnMmHChHrP+4UXXuCBBx4gNjaWhx9+mHHjxnn08wS4/fbbufjiixk+fDhx\ncXFcc801FBcXEx0dzVdffcXMmTNJTk4mKSmJe+65h5KSknqP1RQ0qqD4LI0q2HTGjRtHeno6Dz74\noNOh+D2NKigijbZo0SLWrl1bVQaZNWsWY8eOdTosaQD1NhEJQHl5eZx//vns2rWL1NRUXnrpJU48\n8USnw5IGUNlEfJbKJuKLVDYREQlgSt4iIj5IyVtExAcpeYuI+CAlbxERH6TkLSKOOu6446pupxfP\nKXmLNLHo6GhiYmKIiYkhKCiIyMjIqnX3cac95T7JQn1ef/11evXqVXWL+dlnn101Gt7hZGZmkpqa\neth9rrzySsLDw4mNjSU2Npbjjz+ee++9l/z8/AadR31+/fVXBg8e3CTHCiRK3iJNzNNp0Dx1pIGT\nvvvuO+677z5mzpxJfn4+K1euPOzgTI35/Lvuuov8/Hx27tzJm2++yY8//sipp55KUVFRk32ONIzf\nJ+/S0qYf1lOkMSoqKuqdyqu4uJiJEyfStm1b4uPj6d+/P9u3b+e+++5j/vz53HTTTcTExHDLLbcc\nctyffvqJQYMGVd0hGR8fz2WXXUZ0dDQABw8e5H/+53/o3LkziYmJXH/99RQXF7N//35GjhzJli1b\niImJITY2tmpAqdoqbyoJCwujX79+zJo1i127dvHmm29W7fPGG29UDU41YsSIqhEAr7/+ev7yl7/U\nON6YMWN45plnAOjSpQvffPMNYGb/GTRoEPHx8XTs2JGbb765xoiEQUFBvPzyyxxzzDHEx8fXmHUI\n4NVXXyU9PZ3Y2Fh69+7NkiVLANiyZQsXXHAB7du3Jy0tjX/961+e/MqkGR0yO0XHjpblNjGG+JG6\nft8tjftMOs8884w1aNAgKzc31yopKbH+/Oc/W5dccollWZb10ksvWaNHj7YOHDhgVVRUWD///LOV\nn59vWVb9M81Umj9/vhUREWE9+OCD1n//+1+ruLi4xuu33XabNWbMGGvPnj1WQUGBNXr0aOuee+6x\nLMuyMjMzrZSUlMOew5VXXmn99a9/PWT75ZdfXjWL/Mcff2x1797dWrVqlVVeXm498sgj1imnnGJZ\nlmXNmzfPSk1NrXrf7t27rYiICGvr1q2H/IwWL15sLVy40CovL7c2bNhg9erVy3rmmWeq3utyuazR\no0db+/btszZt2mS1a9fOmjNnjmVZlvX+++9bycnJ1qJFiyzLsqw1a9ZYGzdutMrLy60//OEP1sMP\nP2yVlpZa69ats9LS0qwvv/zysOftLfX9u6WBM+n4m0N+IH37WtbChd7+dYgT6vp9tzTuialXr151\nTuVVVlZmvfHGG9Ypp5xiLVu27JBjZGRkWK+99tphP+eLL76wRo8ebbVu3dqKjo62br/9dqu8vNyq\nqKiwoqKiakwD9sMPP1hdu3a1LMtMzdbY5H3XXXdZw4cPtyzLskaMGFHjD0x5ebkVGRlpbdq0yaqo\nqLA6depkzZs3z7Isy3rllVesM844o86fUW3//Oc/rfPOO69q3eVyWd9//33V+sUXX1w1Jdvw4cOt\n55577pBj/Pjjj1anTp1qbHvsscesq6666rDn7S31/btF06DVlJICbpNxSyBpYfOgbdiwoc6pvLZv\n385ll13G5s2bGT9+PHv37mXixIk8+uijhISY/6JHqnuPGDGCESNGAPDNN99w0UUXceyxx3LeeedR\n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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x7f6c7ea88dd0>"
       ]
      }
     ],
     "prompt_number": 48
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# well that does not bode well - let explore this Means square thing a bit more - hope something magical happens. \n",
      "\n",
      "# new fancy way to write GBBM\n",
      "nEst = 2000\n",
      "depth = 7\n",
      "learnRate = 0.01\n",
      "subSamp = 0.5\n",
      "GBR = ensemble.GradientBoostingRegressor(n_estimators=nEst,\n",
      "                                                  max_depth=depth,\n",
      "                                                  learning_rate=learnRate,\n",
      "                                                  subsample = subSamp,\n",
      "                                                  loss='ls')\n",
      "\n",
      "GBR.fit(X_train, y_train)\n",
      "\n",
      "# compute mse on test set\n",
      "msError = []\n",
      "predictions = GBR.staged_predict(X_test)\n",
      "for p in predictions:\n",
      "    msError.append(mean_squared_error(y_test, p))\n",
      "\n",
      "print(\"MSE\" )\n",
      "print(min(msError))\n",
      "print(msError.index(min(msError)))\n",
      "\n",
      "#plot training and test errors vs number of trees in ensemble\n",
      "plt.figure()\n",
      "plt.plot(range(1, nEst + 1), GBR.train_score_, label='Training Set MSE')\n",
      "plt.plot(range(1, nEst + 1), msError, label='Test Set MSE')\n",
      "plt.legend(loc='upper right')\n",
      "plt.xlabel('Number of Trees in Ensemble')\n",
      "plt.ylabel('Mean Squared Error')\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot feature importance\n",
      "featureImportance = GBR.feature_importances_\n",
      "\n",
      "# Well that terrible lets finish up with feature graph\n",
      "# normalize by max importance\n",
      "features = [\"MarketSqFt\", \"Type\", \"BlockLot\", \"Neighborhood\", \"BuildingClass\", \"TotalUnits\", \"YearBuilt\", \"GrossSqFt\", \"EGI\",\n",
      "            \"GIperSqFt\",\"Market\",\"Year\"]\n",
      "\n",
      "featureImportance = featureImportance / featureImportance.max()\n",
      "idxSorted = numpy.argsort(featureImportance)\n",
      "barPos = numpy.arange(idxSorted.shape[0]) + .5\n",
      "plt.barh(barPos, featureImportance[idxSorted], align='center')\n",
      "plt.yticks(barPos, features)\n",
      "plt.xlabel('Variable Importance')\n",
      "plt.subplots_adjust(left=0.2, right=0.9, top=0.9, bottom=0.1)\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nkiRJkgrm/wNFU1gtmggcLAAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x7f6c7f038ad0>"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Makes sense... probably the only predictor in the data set that relaiablly dicates value over time in time.\n",
      "# hopefully didn't spend a week of my life discovering that real estate goes up over time.....\n",
      "# should have stuck with OLS. Okay all is not loss what if i review indvidual features and go back to Regression trees? \n",
      "# tried to convert class classification code to the Regression\n",
      "\n",
      "\n",
      "train = DataModel[0:25000]\n",
      "# The test set will be the remaining, ~70% of the data\n",
      "test = DataModel[25001:35000]\n",
      "\n",
      "#DataModel = DataFloat.iloc[0:40712,0:23]\n",
      "#DataTarget = DataFloat[DataFloat.columns[0]]\n",
      "\n",
      "features = [\"MarketSqFt\", \"Type\", \"BlockLot\", \"Neighborhood\", \"BuildingClass\", \"TotalUnits\", \"YearBuilt\", \"GrossSqFt\", \"EGI\",\n",
      "            \"GIperSqFt\",\"Market\", \"Year\"]\n",
      "\n",
      "results = []\n",
      "\n",
      "for n in range(1,40000,5000):\n",
      "    clf = ensemble.ExtraTreesRegressor(n_estimators=20)\n",
      "    # train the Regression\n",
      "    clf.fit(train[features], train['MarketSqFt'])\n",
      "    # then make the predictions\n",
      "    preds = clf.predict(test[features])\n",
      "    #\n",
      "    accuracy = np.where(preds==test['MarketSqFt'], 1, 0).sum() / float(len(test))\n",
      "    print \"MarketSqFt: %d, Prediction: %3f\" % (n, accuracy)\n",
      "\n",
      "    results.append([n, accuracy])\n",
      "\n",
      "results = pd.DataFrame(results, columns=[\"n\", \"accuracy\"])\n",
      "\n",
      "pl.plt(results.n, results.accuracy)\n",
      "pl.title(\"Prediction with Increasing N\")\n",
      "pl.show()\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "MarketSqFt: 1, Prediction: 0.116612\n",
        "MarketSqFt: 5001, Prediction: 0.148915"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "MarketSqFt: 10001, Prediction: 0.108911"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "MarketSqFt: 15001, Prediction: 0.119612"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "MarketSqFt: 20001, Prediction: 0.127913"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "MarketSqFt: 25001, Prediction: 0.134113"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "MarketSqFt: 30001, Prediction: 0.151015"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "MarketSqFt: 35001, Prediction: 0.111511"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nbFhiFWVlZYRCId8/hg0b5nkMilNxBjnOIMQYpDiBA5M6ytdSopZCOTZFwtvYSKTHseGlg5zPx2FX\nS36KXfhTgfUbdMXmbBkMPIsllDLsAiUREfGpZObTf9N5uI1zPf+O+Je+f078K2BFRMRndEVzkgoK\nCrwOISmKM7UUZ+oEIUYITpzp4oe7S4Wc+piIiCQpLy8P0nAMV0tBREQilBRERCRCSUFERCKUFERE\nJEJJQUREIpQUREQkQklBREQilBRERCRCSUFERCKUFEREJEJJQUREIpQUREQkQklBREQilBRERCRC\nSUFERCKUFEREJEJJQUREIpQUREQkQklBREQilBRERCRCSUFERCKUFEREJEJJQUREIpQUREQkQklB\nREQilBRERCQimaQwAFgElAJDYnzeGZgObANuivpsGTAPmAPMrHOUIhJoO3bAK694HYUkI1FSyAfG\nYomhK3A+0CVqmfXAYGBkjO+HgALgaKB7fQIVkeC6914YOBC++87rSCSRREmhO7AUO+PfAUwABkYt\nsw6Y5XweS1494hORgJs3D/7+dzjpJHjrLa+jkUQSJYX2wLeu1yuc95IVAqZgSeOK2oUmIkG3Ywdc\ncom1FC65REkhCBom+DxUz/WfAKwG9gImY30TH9RznSISECNGwN57w2WXwapVcMstUF4ODRMdecQz\niX40K4EOrtcdsNZCslY7/64DXsTKUdWSQlFRUeR5QUEBBQUFtdiEiPjRvHnw4IMwezbk5UH79rDv\nvjBzJhx/vNfRBU9JSQklJSVp306ien9DYDHQB1iFjSA6H1gYY9kiYBMwynm9K9ZRvQloBrwD3OH8\n6xYKherbIBERP9mxA3r0gKuvhssvr3z/1luhUSMYPty72LJFXl4epKHPNlGfQjlwHfA2sACYiCWE\nQc4DYB+s3+FG4HZgOdDcef8DYC4wA3iN6glBRLLQfffBnnvCH/5Q9f3CQnjzTW9ikuT4YWSQ71sK\npaXW5L3wQq8jEfG/L76AU06Bzz6D/far+tmOHbDXXrB4MbRp40182cKrloIAY8ZYs9fnuUvEc+HR\nRvfcUz0hgJWO+vSBt9/OeGiSJCWFBMrL4fnn4aefYMECr6MR8bf77oPWrauXjdxUQvI3JYUEpk6F\nTp3gnHM0xlqkJvPnW6v6scdstFE8AwbAO+/Azp2Zi02Sp6SQQHExnH++/SIrKYjEVl5uZaO7745d\n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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x7f6c7e7ec9d0>"
       ]
      }
     ],
     "prompt_number": 39
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Got desperate started playing around with Predicators Now, let's see how accurate the predictor is \n",
      "\n",
      "results = []\n",
      "for w in [\"YearBuilt\", 'Year']:\n",
      "    clf = random_forest_clf = ensemble.ExtraTreesRegressor(n_estimators=20)\n",
      "    w = str(w)\n",
      "    clf.fit(train[features], train['MarketSqFt'])\n",
      "    preds = clf.predict(test[features])\n",
      "\n",
      "    accuracy = np.where(preds==test['MarketSqFt'], 1, 0).sum() / float(len(test))\n",
      "    print \"Weights: %s, Accuracy: %3f\" % (w, accuracy)\n",
      "\n",
      "    results.append([w, accuracy])\n",
      "\n",
      "results = pd.DataFrame(results, columns=[\"weight_method\", \"accuracy\"])\n",
      "print results\n",
      "\n",
      "##### okay. - lets review my feature compared to my target . \n",
      "for z in [features]:\n",
      "    clf = random_forest_clf = ensemble.ExtraTreesRegressor(n_estimators=20)\n",
      "    z = str(z)\n",
      "    clf.fit(train[features], train['MarketSqFt'])\n",
      "    preds = clf.predict(test[features])\n",
      "\n",
      "    accuracy = np.where(preds==test['MarketSqFt'], 1, 0).sum() / float(len(test))\n",
      "    print \"Weights: %s, Accuracy: %3f\" % (z, accuracy)\n",
      "\n",
      "    results.append([w, accuracy])\n",
      "\n",
      "results = pd.DataFrame(results, columns=[\"weight_method\", \"accuracy\"])\n",
      "print results"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Weights: YearBuilt, Accuracy: 0.143214\n",
        "Weights: Year, Accuracy: 0.133513"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "  weight_method  accuracy\n",
        "0     YearBuilt  0.143214\n",
        "1          Year  0.133513\n",
        "Weights: ['MarketSqFt', 'Type', 'BlockLot', 'Neighborhood', 'BuildingClass', 'TotalUnits', 'YearBuilt', 'GrossSqFt', 'EGI', 'GIperSqFt', 'Market', 'Year'], Accuracy: 0.134113"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "  weight_method  accuracy\n",
        "0     YearBuilt  0.143214\n",
        "1          Year  0.133513\n"
       ]
      }
     ],
     "prompt_number": 41
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def predict(Neighborhood , year):\n",
      "    return results.predict([1, Neighborhood , year])\n",
      "\n",
      "print \"\\n\"\n",
      "print \"....... {}\".format(predict(115, 2015)[0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}
